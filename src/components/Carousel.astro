---
import { videos, PlayerVars } from "./carousel";

const firstVideo = videos[0];

const url = new URL(`https://www.youtube.com/embed/${firstVideo?.id}`);
const params = new URLSearchParams();
for (const [key, value] of Object.entries(PlayerVars)) {
  params.append(key, value.toString());
}
url.search = params.toString();

const text = firstVideo?.text;
---

<div id="yt-p-container">
  <iframe id="yt-p" src={url.toString()}></iframe>
  <div class="overlay" data-id={firstVideo?.id}>
    {text?.map((t: string) => <span>{t}</span>)}
  </div>
</div>

<script is:inline src="https://www.youtube.com/iframe_api"></script>
<script>
  import { videos, PlayerVars } from "./carousel";

  let player: YT.Player;

  const container = document.getElementById("yt-p-container");
  const overlay = document.querySelector<HTMLElement>(".overlay");

  function onPlayerStateChange(event: YT.OnStateChangeEvent) {
    if (event.data === YT.PlayerState.BUFFERING) {
      const index = player.getPlaylistIndex();
      const now_video = videos[index];
      if (!now_video || !overlay) return;
      const { id, text } = now_video;

      const fragment = document.createDocumentFragment();
      text.forEach((text) => {
        const span = document.createElement("span");
        span.textContent = text;
        fragment.appendChild(span);
      });

      if (overlay.dataset.id === id) return;
      overlay
        .animate([{ opacity: 1 }, { opacity: 0 }], {
          duration: 500,
          fill: "forwards",
        })
        .finished.then(() => {
          overlay.replaceChildren(fragment.cloneNode(true));
          overlay.animate([{ opacity: 0 }, { opacity: 1 }], {
            duration: 500,
            fill: "forwards",
          });
          overlay.dataset.id = id;
        });
    }
  }

  declare global {
    interface Window {
      onYouTubeIframeAPIReady: () => void;
    }
  }
  window.onYouTubeIframeAPIReady = function () {
    const options: YT.PlayerOptions = {
      events: {
        onReady: () => {
          container?.animate([{ opacity: 0 }, { opacity: 1 }], {
            duration: 1000,
            fill: "forwards",
          });
          const ids = videos.map((video) => video.id);
          player.cuePlaylist(ids, 0, 0, "hd1080");
          player.setLoop(true);

          player.playVideoAt(0);
        },
        onStateChange: onPlayerStateChange,
      },
      playerVars: PlayerVars,
    };
    player = new YT.Player("yt-p", options);
  };
</script>

<style>
  #yt-p-container {
    width: 100%;
    height: 100%;
    position: relative;
    overflow: hidden;
    z-index: -1;
    opacity: 0;
  }
  #yt-p {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    min-width: 100%;
    min-height: calc(100vh + 2 * 8rem);
    aspect-ratio: 16 / 9;
    border: none;
    overflow: hidden;
  }
  .overlay {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
    justify-content: center;
    align-items: start;
    padding: 0.5rem 1rem;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border-radius: 0.8rem;
  }
</style>
